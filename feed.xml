<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Thoughts</title>
    <description>Coding is fun, so let's share some thoughts, ideas, opinions and code for all. Code for all!</description>
    <link>https://vnegrisolo.github.io/</link>
    <atom:link href="https://vnegrisolo.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 27 Jul 2016 18:00:25 -0300</pubDate>
    <lastBuildDate>Wed, 27 Jul 2016 18:00:25 -0300</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>

    
    
      <item>
        <title>Why Ember JS</title>
        <description>&lt;p&gt;Ember is a &lt;strong&gt;light&lt;/strong&gt;, &lt;strong&gt;flexible&lt;/strong&gt;, &lt;strong&gt;efficient&lt;/strong&gt; and &lt;strong&gt;very powerful&lt;/strong&gt; javascript framework for very &lt;strong&gt;Ambitious&lt;/strong&gt; web applications. In this post I write about the greatness of Ember, why I like it, some myths and also its problems. This is an opinionated post.&lt;/p&gt;

&lt;h3 id=&quot;convention-over-configuration&quot;&gt;Convention over Configuration&lt;/h3&gt;

&lt;p&gt;Ember was built with an amazing concept, strongly implemented in the Rails community: &lt;strong&gt;Convention over Configuration&lt;/strong&gt;. This means that there are some patterns to follow that the application relies on. These patterns are so well spread that developers move from projects and start to produce very fast.&lt;/p&gt;

&lt;h3 id=&quot;ember-tooling&quot;&gt;Ember Tooling&lt;/h3&gt;

&lt;p&gt;To start with let’s start with tooling. Ember comes with &lt;code class=&quot;highlighter-rouge&quot;&gt;ember-cli&lt;/code&gt; that is a &lt;strong&gt;command line toolset&lt;/strong&gt; for Ember. With &lt;code class=&quot;highlighter-rouge&quot;&gt;ember-cli&lt;/code&gt; your project a lot of integrations for free.&lt;/p&gt;

&lt;p&gt;The first integration is with a very fast &lt;strong&gt;asset pipeline&lt;/strong&gt;: &lt;a href=&quot;https://github.com/broccolijs/broccoli&quot;&gt;Broccoli&lt;/a&gt;. So if you want to use coffee script or another technology that requires some task on the build step you can do that with Broccoli.&lt;/p&gt;

&lt;p&gt;Another built-in integration is with &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;. Babel is responsible to transform the new javascript generation to the one that are supported by browsers. That’s why we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;ES2015&lt;/code&gt; javascript version in Ember projects.&lt;/p&gt;

&lt;p&gt;Ember also uses &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; for managing javascript dependencies used for &lt;strong&gt;building steps&lt;/strong&gt; dependencies.&lt;/p&gt;

&lt;p&gt;Ember comes with another javascript dependencies manager: &lt;code class=&quot;highlighter-rouge&quot;&gt;bower&lt;/code&gt;. However &lt;code class=&quot;highlighter-rouge&quot;&gt;bower&lt;/code&gt; is used for &lt;strong&gt;front-end&lt;/strong&gt; dependencies.&lt;/p&gt;

&lt;p&gt;There’s a really good web site that compared Ember dependencies and provides a score. Check it out &lt;a href=&quot;https://emberobserver.com/&quot;&gt;Ember Observer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last great point of tooling is &lt;strong&gt;generators&lt;/strong&gt;. Ember comes with a lot of code generators. You can check it out with &lt;code class=&quot;highlighter-rouge&quot;&gt;help&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ember &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;generate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;router--the-best-of-ember&quot;&gt;Router =&amp;gt; The Best of Ember&lt;/h3&gt;

&lt;p&gt;The Ember &lt;strong&gt;Router&lt;/strong&gt; is responsible for handling the current URL and map it to one or more &lt;strong&gt;Route&lt;/strong&gt;. It uses the basic concept of nested resources that URL give to us through its folder structure and all &lt;strong&gt;Routes&lt;/strong&gt; and &lt;strong&gt;Templates&lt;/strong&gt; follow the same structure. The code becomes well segmented by the uri structure. Also developers know exactly which file the code will be. Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// path: app/router.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;photo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;photo/:id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;comment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;comment/:id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ember changes the url in the browser for every transition and it does that using HTML5 &lt;code class=&quot;highlighter-rouge&quot;&gt;pushstate&lt;/code&gt;. This way when the user clicks a link handled by Ember, the &lt;strong&gt;content&lt;/strong&gt; will change, the &lt;strong&gt;url&lt;/strong&gt; will change, the url will be part of the browser &lt;strong&gt;history&lt;/strong&gt;. All of this &lt;strong&gt;without a full page refresh&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Additionally to that Ember will load correctly all the application when a full page refresh is required by the user, or when it shares a url with other user. So it’s kind of having the benefits os a regular server application, but all made in the browser, just hitting the user to get data through ajax.&lt;/p&gt;

&lt;h3 id=&quot;json-api-adapter--ember-data&quot;&gt;Json API Adapter =&amp;gt; ember-data&lt;/h3&gt;

&lt;p&gt;As I said before data communication between browser and server is made by Ajax calls through &lt;code class=&quot;highlighter-rouge&quot;&gt;ember-data&lt;/code&gt;. It’s a kind of ORM (object-relational mapping) over HTTP. It’s built in with Ember Applications already so you don’t need to install it or configure it to start to use.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ember-data&lt;/code&gt; relies on Ember models and it provides a robust way of serializing, persisting and deserializing it to the chosen repository. It comes with &lt;code class=&quot;highlighter-rouge&quot;&gt;JSONAPIAdapter&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;RESTAdapt&lt;/code&gt; and it can be customized.&lt;/p&gt;

&lt;p&gt;Following a convention like &lt;strong&gt;JsonAPI&lt;/strong&gt; is good start point for modeling data between client and server.&lt;/p&gt;

&lt;p&gt;Developers just need to work with models. Serialization is handled by the framework. This is a really big deal. Let’s worry with stuff that matters for the product.&lt;/p&gt;

&lt;h3 id=&quot;myth-ember-is-used-just-for-spa--false&quot;&gt;Myth: Ember is used just for SPA =&amp;gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;SPA stands for &lt;strong&gt;Single Page Application&lt;/strong&gt; and it means that all necessary code (HTML, Javascript, CSS) will be loaded at once in a single page load. After that the flow is controlled by the Javascript, in this case by Ember. And then Ember exchange data with the server using Ajax calls.&lt;/p&gt;

&lt;p&gt;This myth is based on the default way of Ember to work. Without any configuration Ember will append it’s controls to &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt; of the html response and then take care about the user flow. So if you have a legacy application and wants to add a small Ember piece of code you can &lt;a href=&quot;https://guides.emberjs.com/v2.7.0/configuring-ember/embedding-applications/&quot;&gt;configure&lt;/a&gt; your app to just take care of an specific element instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// path: app/app.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rootElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#app&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This way you can have more than one Ember App per page and other javascript frameworks working together.&lt;/p&gt;

&lt;p&gt;You may need to prevent url changes by Ember:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// path: config/environment.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ENV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;locationType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;none&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally you can restrict Ember to handle specific uri:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// path: app/router.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;rootURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/blog/&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;testing&quot;&gt;Testing&lt;/h3&gt;

&lt;p&gt;Ember uses &lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt; for tests. I wrote a very simple acceptance test &lt;a href=&quot;/ember/first-ember-application#testing-your-app&quot;&gt;First Ember Application - Testing your App&lt;/a&gt; and you can see the power of testing inside the user perspective, following its clicks and asserting from html generated.&lt;/p&gt;

&lt;p&gt;Another great library, non built-in, but used by most of Ember applications is &lt;a href=&quot;http://www.ember-cli-mirage.com/&quot;&gt;ember-cli-mirage&lt;/a&gt;. This library is used to mock the server responses, it keeps an in-memory database, it comes with &lt;strong&gt;factories&lt;/strong&gt;, etc. It’s usually used on the tests, but can also be used in development environment.&lt;/p&gt;

&lt;p&gt;Write tests in Ember is so cheap, so easy to maintain and &lt;code class=&quot;highlighter-rouge&quot;&gt;ember-cli-mirage&lt;/code&gt; has a great importance in that.&lt;/p&gt;

&lt;h3 id=&quot;problem-1-ember-is-slow--false&quot;&gt;Problem 1: Ember is slow =&amp;gt; &lt;strong&gt;False&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The first of all, Ember is &lt;strong&gt;fast&lt;/strong&gt; and it has to be said. Ember had some problems in the past when re-rendering big lists. A lot of issues were created to improve performance.&lt;/p&gt;

&lt;p&gt;Anyway, there’s a big promising project &lt;a href=&quot;https://github.com/tildeio/glimmer&quot;&gt;glimmer&lt;/a&gt; that seems to solve all performance issues for good. This project was inspired by React’s Virtual DOM and uses a Stream Tree to identify and apply the changes in the DOM.&lt;/p&gt;

&lt;p&gt;Another performance issue is related to the first load time. Again there’s a promising project to solve this problem: &lt;a href=&quot;https://github.com/ember-fastboot/fastboot&quot;&gt;fastboot&lt;/a&gt;. &lt;strong&gt;Fastboot&lt;/strong&gt; is a server side Ember application provided by NodeJS and it retrieves a ready html when the application is load for the first time.&lt;/p&gt;

&lt;h3 id=&quot;problem-2-ember-doesnt-work-with-seo&quot;&gt;Problem 2: Ember doesn’t work with SEO&lt;/h3&gt;

&lt;p&gt;Ember isn’t great with SEO (search engine optimization). The truth is that there are some applications that don’t care about SEO, but some does, so this is a big issue. This seems to be an issue with search engine crawlers and javascript. Anyway we need to solve that. And the solution here is again &lt;strong&gt;Fastboot&lt;/strong&gt; project.&lt;/p&gt;

&lt;p&gt;So &lt;strong&gt;Fastboot&lt;/strong&gt; solves two problems at once (performance on first load and SEO) by rendering in the server side, so the crawler can index the full page.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In a nutshell: &lt;strong&gt;Ember is great!&lt;/strong&gt; The community has built great tools and libraries that support developers. Some of the best ideas of other frameworks inspired Ember developers to build efficient solutions. Big issues are addressed and solved already by the community and Ember core team.&lt;/p&gt;
</description>
        <pubDate>Wed, 27 Jul 2016 09:00:00 -0300</pubDate>
        <link>https://vnegrisolo.github.io/ember/why-ember-js</link>
        <guid isPermaLink="true">https://vnegrisolo.github.io/ember/why-ember-js</guid>
        
        
        <category>ember</category>
        
      </item>
    
      <item>
        <title>First Ember Application</title>
        <description>&lt;p&gt;&lt;strong&gt;Ember JS&lt;/strong&gt; is a Javascript framework for ambitious Web Applications. This means that you can build &lt;strong&gt;great applications&lt;/strong&gt;, with tons of &lt;strong&gt;user interactions&lt;/strong&gt; in a very &lt;strong&gt;efficient&lt;/strong&gt; way. In this post I’ll tell how to create a simple EmberJS Web Application.&lt;/p&gt;

&lt;h3 id=&quot;install-ember&quot;&gt;Install Ember&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember&lt;/a&gt; uses NodeJs and its &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt; (node package manager) to manage some of dependencies, including Ember itself.&lt;/p&gt;

&lt;p&gt;It also depends on &lt;a href=&quot;https://bower.io/&quot;&gt;bower&lt;/a&gt; to be installed. So make sure you have all of them installed initially:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node -v
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; v6.2.0&lt;/span&gt;
npm -v
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; 3.9.0&lt;/span&gt;
bower -v
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; 1.7.9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then install the last release version of Ember, in this case &lt;code class=&quot;highlighter-rouge&quot;&gt;2.7&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g ember-cli@2.7
ember -v
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; ember-cli: 2.7.0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; node: 6.2.0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; os: darwin x64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;create-an-ember-project&quot;&gt;Create an Ember project&lt;/h3&gt;

&lt;p&gt;For creating an Ember project with the name &lt;code class=&quot;highlighter-rouge&quot;&gt;quickstart&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ember new quickstart
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;quickstart
ember server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will create the project, access the project folder and then start Ember server. You can see your app at &lt;a href=&quot;http://localhost:4200/&quot;&gt;http://localhost:4200/&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;ember-concepts&quot;&gt;Ember Concepts&lt;/h3&gt;

&lt;p&gt;The main goal when building an Ember app is to understand the user interface you want to build. In a uri perspective, all folder structure represents a nested resource. Ember uses that to organize &lt;strong&gt;Routes&lt;/strong&gt; and &lt;strong&gt;Templates&lt;/strong&gt;. Here it is a simple description of Ember Classes:&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Router&lt;/strong&gt; receives a hit from the user and dispatches to a specific &lt;strong&gt;Route&lt;/strong&gt;. There is just one Router per application and is stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;app/router.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In a specific &lt;strong&gt;Route&lt;/strong&gt; you can fetch data from the server based on uri and query params and then it’s controller is called.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;Controller&lt;/strong&gt; can do the same as the Route and it’s being discontinued by the Ember community, so please &lt;strong&gt;don’t use Controllers&lt;/strong&gt;. You can just ignore them when creating a new app, but if you are working in a legacy Ember app you need to know that Controllers in Ember are &lt;strong&gt;Singletons&lt;/strong&gt;. So it will keep a state in it. This could cause some weird behavior or bugs.&lt;/p&gt;

&lt;p&gt;Finally a &lt;strong&gt;Template&lt;/strong&gt; related to its Route is called and rendered using &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;handlebars&lt;/a&gt; for basic conditionals, loops and variable outputs.&lt;/p&gt;

&lt;p&gt;As I said &lt;strong&gt;Routes&lt;/strong&gt; and &lt;strong&gt;Templates&lt;/strong&gt; are related to the uri, but sometimes there are some logic and templates that could be reused. To do that you might need to use a &lt;strong&gt;Component&lt;/strong&gt;. A &lt;strong&gt;Component&lt;/strong&gt; can have both a component class to fetch some data from the server and also it’s template. &lt;strong&gt;Components&lt;/strong&gt; are not stick to the uri.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ember-core-concepts.png&quot; class=&quot;img-responsive&quot; alt=&quot;Ember Core Concepts&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;generating-some-code&quot;&gt;Generating some code&lt;/h3&gt;

&lt;p&gt;The easiest and fastest way to create your code in Ember is to use ember-cli generators. Run the following to know all generators available:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ember &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;generate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s start generating a route &lt;code class=&quot;highlighter-rouge&quot;&gt;hello&lt;/code&gt; with:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ember generate route hello
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; installing route&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt;   create app/routes/hello.js&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt;   create app/templates/hello.hbs&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; updating router&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt;   add route hello&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; installing route-test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt;   create tests/unit/routes/hello-test.js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Add a model that just return a string:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// path: app/routes/hello.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ember&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Ember&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;World&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Finally show it in the template:&lt;/p&gt;

&lt;div class=&quot;language-handlebars highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- path: app/templates/hello.hbs --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;greeting&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello &lt;span class=&quot;k&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}}&lt;/span&gt;!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Go to &lt;a href=&quot;http://localhost:4200/hello&quot;&gt;http://localhost:4200/hello&lt;/a&gt; and check you first Ember Route and Template.&lt;/p&gt;

&lt;h3 id=&quot;testing-your-app&quot;&gt;Testing your App&lt;/h3&gt;

&lt;p&gt;Let’s create an &lt;strong&gt;Acceptance Test&lt;/strong&gt; in order to test the app in the User’s perspective:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ember generate acceptance-test hello
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; installing acceptance-test&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# =&amp;gt;   create tests/acceptance/hello-test.js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a simple and straightforward test that verifies the &lt;strong&gt;current url&lt;/strong&gt; and the &lt;strong&gt;content&lt;/strong&gt; produced when the user hits &lt;code class=&quot;highlighter-rouge&quot;&gt;/hello&lt;/code&gt; page:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// path: tests/acceptance/hello-test.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;qunit&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moduleForAcceptance&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;ember-quickstart/tests/helpers/module-for-acceptance&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;moduleForAcceptance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Acceptance | hello&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;visiting /hello&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/hello&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.greeting&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;andThen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/hello&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.greeting&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s time to check if your tests are passing at &lt;a href=&quot;http://localhost:4200/tests&quot;&gt;http://localhost:4200/tests&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Ember is a powerful Javascript framework and yet very simple to start and maintain. A good way to start is to get used with the &lt;strong&gt;core concepts&lt;/strong&gt; of Ember. Also use Ember &lt;strong&gt;generators&lt;/strong&gt; and other &lt;strong&gt;ember-cli tools&lt;/strong&gt; to gain speed on development and use &lt;strong&gt;tests&lt;/strong&gt; as the best friend you can have when coding. You’ll find yourself as an Ember developer in a blink. Good luck!&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Jul 2016 09:00:00 -0300</pubDate>
        <link>https://vnegrisolo.github.io/ember/first-ember-application</link>
        <guid isPermaLink="true">https://vnegrisolo.github.io/ember/first-ember-application</guid>
        
        
        <category>ember</category>
        
      </item>
    
      <item>
        <title>DSL for API calls</title>
        <description>&lt;p&gt;My goal is to encapsulate a API with service classes using a DSL similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt;. This way we can use methods like &lt;code class=&quot;highlighter-rouge&quot;&gt;where&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;find_by&lt;/code&gt;, etc. In order to achieve that I created a class to abstract a &lt;strong&gt;json API&lt;/strong&gt; using the gem &lt;strong&gt;faraday&lt;/strong&gt; and the result is very cool.&lt;/p&gt;

&lt;h3 id=&quot;motivation&quot;&gt;Motivation&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/lostisland/faraday&quot;&gt;gem faraday&lt;/a&gt; is well known and used by Ruby on Rails community. However, for every request it’s necessary to define &lt;strong&gt;all parameters again&lt;/strong&gt;. I would like to use default values and override them if needed.&lt;/p&gt;

&lt;p&gt;The DSL offered by the gem &lt;code class=&quot;highlighter-rouge&quot;&gt;faraday&lt;/code&gt; it’s a little bit inconsistent. Some &lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; attributes are defined via &lt;strong&gt;regular&lt;/strong&gt; methods and other via &lt;strong&gt;setters&lt;/strong&gt; methods, such as in the folllowing example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Another reason is the API implementation abstraction using a &lt;strong&gt;well known DSL&lt;/strong&gt; by Rails developers, like &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;dsl---domain-specific-language&quot;&gt;DSL - Domain Specific Language&lt;/h3&gt;

&lt;p&gt;My &lt;strong&gt;intention&lt;/strong&gt; was to create a service class where I could use it this way:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;UserService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;access_token: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;my-access-token&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So I started creating the class &lt;code class=&quot;highlighter-rouge&quot;&gt;Api&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;api-class&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Api&lt;/code&gt; Class&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Api&lt;/code&gt; Class represents an instance of a flexible &lt;strong&gt;json API&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Its instance reuses the same &lt;code class=&quot;highlighter-rouge&quot;&gt;Faraday connection&lt;/code&gt; instance by memoizing.&lt;/p&gt;

&lt;p&gt;Also it defines default values for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;open_timeout&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;headers[&#39;Accept&#39;]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;headers[&#39;Content-Type&#39;]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Another important point was the API abstraction that now receives &lt;strong&gt;keyword arguments&lt;/strong&gt;. This allows a cleaner and more explicitly interface than the one offered by &lt;code class=&quot;highlighter-rouge&quot;&gt;faraday&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# path: app/services/api.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Api&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;timeout: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;open_timeout: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@open_timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open_timeout&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;query: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;query: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;query: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Accept&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;application/json&#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;application/json&#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@timeout&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open_timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@open_timeout&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connection&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Faraday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;url: &lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;faraday&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;faraday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:url_encoded&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;faraday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Faraday&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_adapter&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;apiresponse-class&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ApiResponse&lt;/code&gt; Class&lt;/h3&gt;

&lt;p&gt;Every API response is encapsulated by &lt;code class=&quot;highlighter-rouge&quot;&gt;ApiResponse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Its main goal is to parse the &lt;strong&gt;json&lt;/strong&gt; response.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# path: app/services/api_response.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApiResponse&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:response&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;apierror-class&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ApiError&lt;/code&gt; Class&lt;/h3&gt;

&lt;p&gt;Another responsability of &lt;code class=&quot;highlighter-rouge&quot;&gt;ApiResponse&lt;/code&gt; class is to raise an &lt;code class=&quot;highlighter-rouge&quot;&gt;ApiError&lt;/code&gt; in case of the API returns any error in its content.&lt;/p&gt;

&lt;p&gt;This treatment could be via &lt;strong&gt;content&lt;/strong&gt; or via &lt;strong&gt;http code&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# path: app/services/api_error.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApiError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:response&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;githubuserservice-service-class&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Github::UserService&lt;/code&gt; Service Class&lt;/h3&gt;

&lt;p&gt;Finally, the Service Class has as its main goal to create a DSL similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;ActiveRecord&lt;/code&gt; and then abstract the API complexity.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# path: app/services/github/user_service.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Github::UserService&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;user&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;headers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Authorization&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;token &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;api&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;url: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;api_url&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I’m using the Rails method &lt;code class=&quot;highlighter-rouge&quot;&gt;config_for&lt;/code&gt; for defining the configuration. I wrote about that on: &lt;a href=&quot;/rails/configuring-rails-app&quot;&gt;Configuring a Rails Application&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;Api&lt;/code&gt; Class allowed us the reuse of well spread patterns into Rails community, such as &lt;strong&gt;convention over configuration&lt;/strong&gt;, &lt;strong&gt;ActiveRecord pattern&lt;/strong&gt;, &lt;strong&gt;using Hashes over json Strings&lt;/strong&gt;, &lt;strong&gt;error treatment&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;p&gt;All these brings more agility on application development and maintenance, because new developers understand the project faster.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Jul 2016 09:00:00 -0300</pubDate>
        <link>https://vnegrisolo.github.io/rails/dsl-for-api-calls</link>
        <guid isPermaLink="true">https://vnegrisolo.github.io/rails/dsl-for-api-calls</guid>
        
        
        <category>rails</category>
        
      </item>
    
      <item>
        <title>Configuring a Rails Application</title>
        <description>&lt;p&gt;There are a lot to consider when configuring a Rails application, such as &lt;strong&gt;variables organization&lt;/strong&gt;, &lt;strong&gt;environments&lt;/strong&gt;, &lt;strong&gt;security credentials&lt;/strong&gt;, etc. Among so many different ways to do that I’m going to show my prefered way using what Rails has to offer with &lt;code class=&quot;highlighter-rouge&quot;&gt;config_for&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;organization&quot;&gt;Organization&lt;/h3&gt;

&lt;p&gt;Rails has a helper method to load a configuration file and it’s very easy to use it: &lt;a href=&quot;http://api.rubyonrails.org/classes/Rails/Application.html#method-i-config_for&quot;&gt;config_for&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# path: config/application.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyRailsApp&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;github&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This way there’s no need to keep just one &lt;code class=&quot;highlighter-rouge&quot;&gt;application.yml&lt;/code&gt; configuration file with &lt;strong&gt;all&lt;/strong&gt; that the application needs. That’s why I group configurations by some &lt;strong&gt;external dependency&lt;/strong&gt; or by some &lt;strong&gt;specific subject&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;format&quot;&gt;Format&lt;/h3&gt;

&lt;p&gt;In short, my prefered format is &lt;code class=&quot;highlighter-rouge&quot;&gt;yml&lt;/code&gt;, such as in this example:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# path: config/github.yml&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;development&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;&amp;amp;development&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;api_url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://api.github.com&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-public-client-id&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;client_secret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= ENV[&#39;GITHUB_CLIENT_SECRET&#39;] %&amp;gt;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*development&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;staging&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*development&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;client_id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-public-sandbox-client-id&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;*development&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;environments&quot;&gt;Environments&lt;/h3&gt;

&lt;p&gt;In that example the configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;config/github.yml&lt;/code&gt; use the &lt;strong&gt;environments&lt;/strong&gt; as &lt;strong&gt;root keys&lt;/strong&gt;. This way the default values are set in the &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt; key and all environments &lt;strong&gt;inherit&lt;/strong&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt;. Also we can redefine environment specific values as, in this case, &lt;code class=&quot;highlighter-rouge&quot;&gt;client_id&lt;/code&gt; for &lt;em&gt;staging&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Locally the project developers should adopt a common pattern of configuration as &lt;em&gt;url/user/pass&lt;/em&gt;. However if this is not an option by any reason I would fetch the value with a default one, such as:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;%= ENV[&#39;DB_USER&#39;] || &#39;admin&#39; %&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;credentials&quot;&gt;Credentials&lt;/h3&gt;

&lt;p&gt;The main goal is to &lt;strong&gt;never publish&lt;/strong&gt; a credential by obviously security reasons. That’s why we use &lt;strong&gt;environment variables&lt;/strong&gt; and then this kind of configuration goes to &lt;em&gt;Heroku&lt;/em&gt; dashboard or inside &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/environment&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Locally I like to use the gem &lt;a href=&quot;https://github.com/bkeepers/dotenv&quot;&gt;dotenv&lt;/a&gt; always taking care to never commit a private secret. I usually install &lt;code class=&quot;highlighter-rouge&quot;&gt;dotenv&lt;/code&gt; this way:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gem &#39;dotenv-rails&#39;, groups: [:development, :test]&quot;&lt;/span&gt; &amp;gt;&amp;gt; Gemfile;
bundle;
touch .env&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;,.sample&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;.env&quot;&lt;/span&gt; &amp;gt;&amp;gt; .gitignore;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;configurations-usage&quot;&gt;Configurations Usage&lt;/h3&gt;

&lt;p&gt;In order to use the configurations you just access &lt;code class=&quot;highlighter-rouge&quot;&gt;Rails.configuration&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;api_url&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The usage of Rails &lt;code class=&quot;highlighter-rouge&quot;&gt;config_for&lt;/code&gt; simplifies the organization of application configuration. Then all variables are hold into specific files and you never will use an environment variable inside the code anymore.&lt;/p&gt;

&lt;p&gt;Additionally, the usage of &lt;code class=&quot;highlighter-rouge&quot;&gt;.env.sample&lt;/code&gt; and the gem &lt;strong&gt;dotenv&lt;/strong&gt; helps a new developer to find out what’s needed to configure locally for starting to work on the project.&lt;/p&gt;

&lt;p&gt;Finally we can discard to add more dependencies to the project such as &lt;a href=&quot;https://github.com/laserlemon/figaro&quot;&gt;figaro&lt;/a&gt; or &lt;a href=&quot;https://github.com/settingslogic/settingslogic&quot;&gt;settingslogic&lt;/a&gt; because they just try to solve the same problems and then let the project with less dependencies.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Jul 2016 09:00:00 -0300</pubDate>
        <link>https://vnegrisolo.github.io/rails/configuring-rails-app</link>
        <guid isPermaLink="true">https://vnegrisolo.github.io/rails/configuring-rails-app</guid>
        
        
        <category>rails</category>
        
      </item>
    
  </channel>
</rss>
